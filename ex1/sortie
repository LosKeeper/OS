 INFO Reading program path="exo1.s"
DEBUG Parsing program
DEBUG Building computer entrypoint=main_racine
DEBUG compile{entrypoint="main_racine"}:layout_memory: Laying out memory lines=136
DEBUG compile{entrypoint="main_racine"}:fill_memory: Filling memory placements=111 labels={"s2": 1060, "racine": 1063, "main_calcul": 1000, "s1": 1040, "last_arg": 1027, "r_while_seconde_condition": 1080, "r_while_first_condition": 1073, "r_while": 1087, "main_prodscal": 1004, "r_else": 1096, "r_while_end": 1106, "main_racine": 1011, "prodscal": 1035, "calcul": 1014}
DEBUG compile{entrypoint="main_racine"}: Found entrypoint pc=1011 entrypoint="main_racine"
 INFO Running program
 INFO run:step{cost=1}: Executing instruction "push [15]"
DEBUG run:step{cost=1}:execute{self=Push(Imm(Imm(15)))}: push(Word(15))
 INFO run:step{cost=1}: Executing instruction "call [1063]"
DEBUG run:step{cost=1}:execute{self=Call(Imm(Imm(1063)))}: Jumping to address 1063
 INFO run:step{cost=1}: Executing instruction "push %b"
DEBUG run:step{cost=1}:execute{self=Push(Reg(B))}: push(Empty)
 INFO run:step{cost=1}: Executing instruction "push [1]"
DEBUG run:step{cost=1}:execute{self=Push(Imm(Imm(1)))}: push(Word(1))
 INFO run:step{cost=2}: Executing instruction "ld   [%sp+3], %b"
 INFO run:step{cost=1}: Executing instruction "push %b"
DEBUG run:step{cost=1}:execute{self=Push(Reg(B))}: push(Word(15))
 INFO run:step{cost=2}: Executing instruction "ld   [%sp], %a"
 INFO run:step{cost=1}: Executing instruction "sub  [1], %a"
DEBUG run:step{cost=1}:execute{self=Sub(Imm(Imm(1)), A)}: 15 - 1 = 14
 INFO run:step{cost=1}: Executing instruction "div  [2], %a"
DEBUG run:step{cost=1}:execute{self=Div(Imm(Imm(2)), A)}: 14 / 2 = 7
 INFO run:step{cost=1}: Executing instruction "add  [1], %a"
DEBUG run:step{cost=1}:execute{self=Add(Imm(Imm(1)), A)}: 1 + 7 = 8
 INFO run:step{cost=1}: Executing instruction "push %a"
DEBUG run:step{cost=1}:execute{self=Push(Reg(A))}: push(Word(8))
 INFO run:step{cost=1}: Executing instruction "jmp  [1073]"
DEBUG run:step{cost=1}:execute{self=Jmp(Imm(Imm(1073)))}: Jumping to address 0x431
 INFO run:step{cost=2}: Executing instruction "ld   [%sp+5], %a"
 INFO run:step{cost=1}: Executing instruction "pop  %b"
DEBUG run:step{cost=1}:execute{self=Pop(B)}:pop: Poping value: Word(8)
DEBUG run:step{cost=1}:execute{self=Pop(B)}: pop => Word(8)
 INFO run:step{cost=1}: Executing instruction "push %b"
DEBUG run:step{cost=1}:execute{self=Push(Reg(B))}: push(Word(8))
 INFO run:step{cost=1}: Executing instruction "mul  %b, %b"
DEBUG run:step{cost=1}:execute{self=Mul(Reg(B), B)}: 8 * 8 = 64
 INFO run:step{cost=1}: Executing instruction "cmp  %b, %a"
DEBUG run:step{cost=1}:execute{self=Cmp(Reg(B), A)}: cmp(64, 15) => (empty)
 INFO run:step{cost=1}: Executing instruction "jgt  [1087]"
DEBUG run:step{cost=1}:execute{self=Jgt(Imm(Imm(1087)))}: Jumping to address 0x43f
 INFO run:step{cost=1}: Executing instruction "pop  %b"
DEBUG run:step{cost=1}:execute{self=Pop(B)}:pop: Poping value: Word(8)
DEBUG run:step{cost=1}:execute{self=Pop(B)}: pop => Word(8)
 INFO run:step{cost=1}: Executing instruction "push %b"
DEBUG run:step{cost=1}:execute{self=Push(Reg(B))}: push(Word(8))
 INFO run:step{cost=1}: Executing instruction "mul  %b, %b"
DEBUG run:step{cost=1}:execute{self=Mul(Reg(B), B)}: 8 * 8 = 64
 INFO run:step{cost=1}: Executing instruction "cmp  %b, %a"
DEBUG run:step{cost=1}:execute{self=Cmp(Reg(B), A)}: cmp(64, 15) => (empty)
 INFO run:step{cost=1}: Executing instruction "jgt  [1096]"
DEBUG run:step{cost=1}:execute{self=Jgt(Imm(Imm(1096)))}: Jumping to address 0x448
 INFO run:step{cost=1}: Executing instruction "pop  %b"
DEBUG run:step{cost=1}:execute{self=Pop(B)}:pop: Poping value: Word(8)
DEBUG run:step{cost=1}:execute{self=Pop(B)}: pop => Word(8)
 INFO run:step{cost=1}: Executing instruction "push %b"
DEBUG run:step{cost=1}:execute{self=Push(Reg(B))}: push(Word(8))
 INFO run:step{cost=2}: Executing instruction "st   %b, [%sp+3]"
 INFO run:step{cost=2}: Executing instruction "ld   [%sp+2], %a"
 INFO run:step{cost=1}: Executing instruction "sub  %b, %a"
DEBUG run:step{cost=1}:execute{self=Sub(Reg(B), A)}: 1 - 8 = -7
 INFO run:step{cost=1}: Executing instruction "div  [2], %a"
DEBUG run:step{cost=1}:execute{self=Div(Imm(Imm(2)), A)}: -7 / 2 = -3
 INFO run:step{cost=1}: Executing instruction "add  %b, %a"
DEBUG run:step{cost=1}:execute{self=Add(Reg(B), A)}: 8 + -3 = 5
 INFO run:step{cost=1}: Executing instruction "pop  %b"
DEBUG run:step{cost=1}:execute{self=Pop(B)}:pop: Poping value: Word(8)
DEBUG run:step{cost=1}:execute{self=Pop(B)}: pop => Word(8)
 INFO run:step{cost=1}: Executing instruction "push %a"
DEBUG run:step{cost=1}:execute{self=Push(Reg(A))}: push(Word(5))
 INFO run:step{cost=1}: Executing instruction "jmp  [1073]"
DEBUG run:step{cost=1}:execute{self=Jmp(Imm(Imm(1073)))}: Jumping to address 0x431
 INFO run:step{cost=2}: Executing instruction "ld   [%sp+5], %a"
 INFO run:step{cost=1}: Executing instruction "pop  %b"
DEBUG run:step{cost=1}:execute{self=Pop(B)}:pop: Poping value: Word(5)
DEBUG run:step{cost=1}:execute{self=Pop(B)}: pop => Word(5)
 INFO run:step{cost=1}: Executing instruction "push %b"
DEBUG run:step{cost=1}:execute{self=Push(Reg(B))}: push(Word(5))
 INFO run:step{cost=1}: Executing instruction "mul  %b, %b"
DEBUG run:step{cost=1}:execute{self=Mul(Reg(B), B)}: 5 * 5 = 25
 INFO run:step{cost=1}: Executing instruction "cmp  %b, %a"
DEBUG run:step{cost=1}:execute{self=Cmp(Reg(B), A)}: cmp(25, 15) => (empty)
 INFO run:step{cost=1}: Executing instruction "jgt  [1087]"
DEBUG run:step{cost=1}:execute{self=Jgt(Imm(Imm(1087)))}: Jumping to address 0x43f
 INFO run:step{cost=1}: Executing instruction "pop  %b"
DEBUG run:step{cost=1}:execute{self=Pop(B)}:pop: Poping value: Word(5)
DEBUG run:step{cost=1}:execute{self=Pop(B)}: pop => Word(5)
 INFO run:step{cost=1}: Executing instruction "push %b"
DEBUG run:step{cost=1}:execute{self=Push(Reg(B))}: push(Word(5))
 INFO run:step{cost=1}: Executing instruction "mul  %b, %b"
DEBUG run:step{cost=1}:execute{self=Mul(Reg(B), B)}: 5 * 5 = 25
 INFO run:step{cost=1}: Executing instruction "cmp  %b, %a"
DEBUG run:step{cost=1}:execute{self=Cmp(Reg(B), A)}: cmp(25, 15) => (empty)
 INFO run:step{cost=1}: Executing instruction "jgt  [1096]"
DEBUG run:step{cost=1}:execute{self=Jgt(Imm(Imm(1096)))}: Jumping to address 0x448
 INFO run:step{cost=1}: Executing instruction "pop  %b"
DEBUG run:step{cost=1}:execute{self=Pop(B)}:pop: Poping value: Word(5)
DEBUG run:step{cost=1}:execute{self=Pop(B)}: pop => Word(5)
 INFO run:step{cost=1}: Executing instruction "push %b"
DEBUG run:step{cost=1}:execute{self=Push(Reg(B))}: push(Word(5))
 INFO run:step{cost=2}: Executing instruction "st   %b, [%sp+3]"
 INFO run:step{cost=2}: Executing instruction "ld   [%sp+2], %a"
 INFO run:step{cost=1}: Executing instruction "sub  %b, %a"
DEBUG run:step{cost=1}:execute{self=Sub(Reg(B), A)}: 1 - 5 = -4
 INFO run:step{cost=1}: Executing instruction "div  [2], %a"
DEBUG run:step{cost=1}:execute{self=Div(Imm(Imm(2)), A)}: -4 / 2 = -2
 INFO run:step{cost=1}: Executing instruction "add  %b, %a"
DEBUG run:step{cost=1}:execute{self=Add(Reg(B), A)}: 5 + -2 = 3
 INFO run:step{cost=1}: Executing instruction "pop  %b"
DEBUG run:step{cost=1}:execute{self=Pop(B)}:pop: Poping value: Word(5)
DEBUG run:step{cost=1}:execute{self=Pop(B)}: pop => Word(5)
 INFO run:step{cost=1}: Executing instruction "push %a"
DEBUG run:step{cost=1}:execute{self=Push(Reg(A))}: push(Word(3))
 INFO run:step{cost=1}: Executing instruction "jmp  [1073]"
DEBUG run:step{cost=1}:execute{self=Jmp(Imm(Imm(1073)))}: Jumping to address 0x431
 INFO run:step{cost=2}: Executing instruction "ld   [%sp+5], %a"
 INFO run:step{cost=1}: Executing instruction "pop  %b"
DEBUG run:step{cost=1}:execute{self=Pop(B)}:pop: Poping value: Word(3)
DEBUG run:step{cost=1}:execute{self=Pop(B)}: pop => Word(3)
 INFO run:step{cost=1}: Executing instruction "push %b"
DEBUG run:step{cost=1}:execute{self=Push(Reg(B))}: push(Word(3))
 INFO run:step{cost=1}: Executing instruction "mul  %b, %b"
DEBUG run:step{cost=1}:execute{self=Mul(Reg(B), B)}: 3 * 3 = 9
 INFO run:step{cost=1}: Executing instruction "cmp  %b, %a"
DEBUG run:step{cost=1}:execute{self=Cmp(Reg(B), A)}: cmp(9, 15) => NEGATIVE
 INFO run:step{cost=1}: Executing instruction "jgt  [1087]"
 INFO run:step{cost=1}: Executing instruction "jmp  [1080]"
DEBUG run:step{cost=1}:execute{self=Jmp(Imm(Imm(1080)))}: Jumping to address 0x438
 INFO run:step{cost=1}: Executing instruction "pop  %b"
DEBUG run:step{cost=1}:execute{self=Pop(B)}:pop: Poping value: Word(3)
DEBUG run:step{cost=1}:execute{self=Pop(B)}: pop => Word(3)
 INFO run:step{cost=1}: Executing instruction "push %b"
DEBUG run:step{cost=1}:execute{self=Push(Reg(B))}: push(Word(3))
 INFO run:step{cost=1}: Executing instruction "add  [1], %b"
DEBUG run:step{cost=1}:execute{self=Add(Imm(Imm(1)), B)}: 1 + 3 = 4
 INFO run:step{cost=1}: Executing instruction "mul  %b, %b"
DEBUG run:step{cost=1}:execute{self=Mul(Reg(B), B)}: 4 * 4 = 16
 INFO run:step{cost=1}: Executing instruction "cmp  %b, %a"
DEBUG run:step{cost=1}:execute{self=Cmp(Reg(B), A)}: cmp(16, 15) => (empty)
 INFO run:step{cost=1}: Executing instruction "jle  [1087]"
 INFO run:step{cost=1}: Executing instruction "jmp  [1106]"
DEBUG run:step{cost=1}:execute{self=Jmp(Imm(Imm(1106)))}: Jumping to address 0x452
 INFO run:step{cost=1}: Executing instruction "pop  %a"
DEBUG run:step{cost=1}:execute{self=Pop(A)}:pop: Poping value: Word(3)
DEBUG run:step{cost=1}:execute{self=Pop(A)}: pop => Word(3)
 INFO run:step{cost=1}: Executing instruction "add  [1], %sp"
DEBUG run:step{cost=1}:execute{self=Add(Imm(Imm(1)), SP)}: 1 + 9995 = 9996
 INFO run:step{cost=1}: Executing instruction "add  [1], %sp"
DEBUG run:step{cost=1}:execute{self=Add(Imm(Imm(1)), SP)}: 1 + 9996 = 9997
 INFO run:step{cost=1}: Executing instruction "pop  %b"
DEBUG run:step{cost=1}:execute{self=Pop(B)}:pop: Poping value: Word(5)
DEBUG run:step{cost=1}:execute{self=Pop(B)}: pop => Word(5)
 INFO run:step{cost=1}: Executing instruction "rtn"
DEBUG run:step{cost=1}:execute{self=Rtn}:pop: Poping value: Word(1013)
DEBUG run:step{cost=1}:execute{self=Rtn}: Returning to 1013
 INFO run:step{cost=1}: Executing instruction "reset"
 INFO End of program registers=%a = 3 | %b = 5 | %pc = 1014 | %sp = 9999 | %sr = (empty)
